'use client';

import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { useVisionTaggerData, useDashboardMutation } from '@/hooks/useDashboardData';
import DashboardLayout from '@/components/dashboard/DashboardLayout';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Loader2,
  Upload,
  Tag,
  Download,
  Eye,
  Edit3,
  Check,
  X,
  Image as ImageIcon,
  Sparkles,
  Target,
  BarChart3,
  TrendingUp,
  Zap,
  Camera,
  FileText,
  Settings,
  RefreshCw,
  AlertCircle,
  CheckCircle,
  Clock,
  Search,
  Filter,
  Grid,
  List,
} from 'lucide-react';
import {
  ResponsiveContainer,
  AreaChart,
  Area,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  RadialBarChart,
  RadialBar,
  LineChart,
  Line,
} from 'recharts';
import Image from 'next/image';

interface ImageTag {
  label: string;
  confidence: number;
  category?: string;
}

interface AnalyzedImage {
  id: string;
  url: string;
  title: string;
  tags: ImageTag[];
  altText?: string;
  caption?: string;
  description?: string;
  suggestedAltText?: string;
  suggestedCaption?: string;
  suggestedDescription?: string;
  analyzedAt: Date;
  status: 'pending' | 'analyzed' | 'fixed' | 'error';
  seoScore?: number;
  accessibilityScore?: number;
  fileSize?: number;
  dimensions?: { width: number; height: number };
}

interface VisionMetrics {
  date: string;
  imagesProcessed: number;
  altTextGenerated: number;
  captionsCreated: number;
  seoScore: number;
}

interface CategoryData {
  name: string;
  value: number;
  color: string;
}

const COLORS = {
  primary: '#7C3AED',
  secondary: '#EC4899',
  tertiary: '#F59E0B',
  success: '#10B981',
  error: '#EF4444',
  warning: '#F59E0B',
  info: '#3B82F6',
};

export default function VisionTaggerPage() {
  const { user } = useAuth();
  const [loading, setLoading] = useState(false);
  const [activeView, setActiveView] = useState<'dashboard' | 'analyze' | 'manage'>('dashboard');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  
  // Fetch data from backend
  const { data: dashboardData, loading: dataLoading, error: dataError, refetch } = useVisionTaggerData(activeView);
  const { mutate: uploadImage } = useDashboardMutation('visiontagger');
  
  // Image analysis states
  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
  const [dragActive, setDragActive] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  
  // Image management states
  const [images, setImages] = useState<AnalyzedImage[]>([]);
  const [selectedImage, setSelectedImage] = useState<AnalyzedImage | null>(null);
  const [editingImage, setEditingImage] = useState<AnalyzedImage | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  
  // Modal states
  const [showImageModal, setShowImageModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);

  // Generate metrics data from backend data
  const metricsData: VisionMetrics[] = dashboardData?.analytics?.topTags ? 
    dashboardData.analytics.topTags.slice(0, 7).map((tag: any, index: number) => ({
      date: `Day ${index + 1}`,
      imagesProcessed: tag.count || 0,
      altTextGenerated: Math.floor((tag.count || 0) * 0.9),
      captionsCreated: Math.floor((tag.count || 0) * 0.8),
      seoScore: dashboardData.analytics.avgSeoScore || 0,
    })) : [];

  const categoryData: CategoryData[] = dashboardData?.analytics?.topTags ? 
    dashboardData.analytics.topTags.slice(0, 4).map((tag: any, index: number) => ({
      name: tag.label,
      value: tag.count,
      color: ['#10B981', '#F59E0B', '#8B5CF6', '#EC4899'][index] || '#6B7280',
    })) : [];

  const backendSeoScore = dashboardData?.analytics?.avgSeoScore || 0;
  const backendAccessibilityScore = dashboardData?.analytics?.avgAccessibilityScore || 0;

  const seoScoreData = [
    { name: 'SEO Score', value: backendSeoScore, fill: '#10B981' },
    { name: 'Remaining', value: 100 - backendSeoScore, fill: '#374151' },
  ];

  const accessibilityData = [
    { name: 'Accessibility', value: backendAccessibilityScore, fill: '#3B82F6' },
    { name: 'Remaining', value: 100 - backendAccessibilityScore, fill: '#374151' },
  ];

  // Update images when data changes
  useEffect(() => {
    if (dashboardData) {
      if (activeView === 'dashboard' && dashboardData.recentImages) {
        setImages(dashboardData.recentImages.map((img: any) => ({
          id: img.id,
          url: img.url,
          title: img.filename,
          tags: img.analysis?.tags || [],
          altText: img.seo?.currentAltText,
          suggestedAltText: img.seo?.suggestedAltText,
          suggestedCaption: img.seo?.suggestedCaption,
          suggestedDescription: img.seo?.suggestedDescription,
          analyzedAt: img.analyzedAt?.toDate() || img.createdAt?.toDate() || new Date(),
          status: img.status,
          seoScore: img.seo?.score || 0,
          accessibilityScore: img.accessibility?.score || 0,
          fileSize: img.fileSize ? img.fileSize / (1024 * 1024) : 0, // Convert to MB
          dimensions: img.dimensions,
        })));
      } else if (activeView === 'analyze' && dashboardData.images) {
        setImages(dashboardData.images.map((img: any) => ({
          id: img.id,
          url: img.url,
          title: img.filename,
          tags: img.analysis?.tags || [],
          altText: img.seo?.currentAltText,
          suggestedAltText: img.seo?.suggestedAltText,
          suggestedCaption: img.seo?.suggestedCaption,
          suggestedDescription: img.seo?.suggestedDescription,
          analyzedAt: img.analyzedAt?.toDate() || img.createdAt?.toDate() || new Date(),
          status: img.status,
          seoScore: img.seo?.score || 0,
          accessibilityScore: img.accessibility?.score || 0,
          fileSize: img.fileSize ? img.fileSize / (1024 * 1024) : 0,
          dimensions: img.dimensions,
        })));
      } else if (activeView === 'manage' && dashboardData.images) {
        const allImages = dashboardData.images.all || [];
        setImages(allImages.map((img: any) => ({
          id: img.id,
          url: img.url,
          title: img.filename,
          tags: img.analysis?.tags || [],
          altText: img.seo?.currentAltText,
          suggestedAltText: img.seo?.suggestedAltText,
          suggestedCaption: img.seo?.suggestedCaption,
          suggestedDescription: img.seo?.suggestedDescription,
          analyzedAt: img.analyzedAt?.toDate() || img.createdAt?.toDate() || new Date(),
          status: img.status,
          seoScore: img.seo?.score || 0,
          accessibilityScore: img.accessibility?.score || 0,
          fileSize: img.fileSize ? img.fileSize / (1024 * 1024) : 0,
          dimensions: img.dimensions,
        })));
      }
    }
  }, [dashboardData, activeView]);

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    const files = Array.from(e.dataTransfer.files).filter(file => 
      file.type.startsWith('image/')
    );
    setSelectedFiles(prev => [...prev, ...files]);
  }, []);

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(e.target.files || []);
    setSelectedFiles(prev => [...prev, ...files]);
  };

  const handleAnalyzeImages = async () => {
    if (selectedFiles.length === 0) return;
    
    setAnalyzing(true);
    try {
      const uploadPromises = selectedFiles.map(async (file) => {
        // Get image dimensions
        const dimensions = await getImageDimensions(file);
        
        // Create FormData for file upload
        const formData = new FormData();
        formData.append('file', file);
        formData.append('filename', file.name);
        formData.append('fileSize', file.size.toString());
        formData.append('dimensions', JSON.stringify(dimensions));
        formData.append('format', file.type.split('/')[1] || 'jpg');

        // Upload and analyze image
        const response = await fetch('/api/visiontagger/analyze', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`Failed to analyze ${file.name}`);
        }

        return await response.json();
      });

      const results = await Promise.all(uploadPromises);
      console.log('Analysis results:', results);

      // Refresh data after upload
      await refetch();
      setSelectedFiles([]);
      alert(`Successfully analyzed ${results.length} image(s)!`);
    } catch (error) {
      console.error('Error analyzing images:', error);
      alert(`Error analyzing images: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setAnalyzing(false);
    }
  };

  // Helper function to get image dimensions
  const getImageDimensions = (file: File): Promise<{ width: number; height: number }> => {
    return new Promise((resolve) => {
      const img = new window.Image();
      img.onload = () => {
        resolve({ width: img.width, height: img.height });
      };
      img.src = URL.createObjectURL(file);
    });
  };

  const handleFixImage = async (image: AnalyzedImage) => {
    try {
      // TODO: Implement fix API call
      const updatedImages = images.map(img => 
        img.id === image.id 
          ? { 
              ...img, 
              status: 'fixed' as const,
              altText: img.suggestedAltText,
              caption: img.suggestedCaption,
              description: img.suggestedDescription,
            }
          : img
      );
      setImages(updatedImages);
      setShowImageModal(false);
      alert('Image metadata updated successfully!');
    } catch (error) {
      console.error('Error fixing image:', error);
      alert('Error updating image. Please try again.');
    }
  };

  const filteredImages = images.filter(image => {
    const matchesSearch = image.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         image.tags.some(tag => tag.label.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === 'all' || image.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const totalImages = images.length;
  const analyzedImages = images.filter(img => img.status === 'analyzed' || img.status === 'fixed').length;
  const fixedImages = images.filter(img => img.status === 'fixed').length;
  const avgSeoScore = images.reduce((sum, img) => sum + (img.seoScore || 0), 0) / images.length || 0;

  // Show loading state
  if (dataLoading && !dashboardData) {
    return (
      <DashboardLayout>
        <div className="min-h-screen bg-gradient-to-br from-[#1A1B3A] via-[#2A2153] to-[#1A1B3A] text-white flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-12 w-12 animate-spin text-purple-400 mx-auto mb-4" />
            <p className="text-gray-300">Loading VisionTagger data...</p>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Show error state
  if (dataError) {
    return (
      <DashboardLayout>
        <div className="min-h-screen bg-gradient-to-br from-[#1A1B3A] via-[#2A2153] to-[#1A1B3A] text-white flex items-center justify-center">
          <div className="text-center">
            <AlertCircle className="h-12 w-12 text-red-400 mx-auto mb-4" />
            <p className="text-red-300 text-lg mb-2">Error loading VisionTagger data</p>
            <p className="text-gray-400 mb-4">{dataError}</p>
            <Button onClick={() => refetch()} className="bg-purple-600 hover:bg-purple-700">
              <RefreshCw className="h-4 w-4 mr-2" />
              Retry
            </Button>
          </div>
        </div>
      </DashboardLayout>
    );
  }

  // Calculate metrics from images data
  const totalImages = images.length;
  const analyzedImages = images.filter(img => img.status === 'analyzed' || img.status === 'fixed').length;
  const fixedImages = images.filter(img => img.status === 'fixed').length;
  const avgSeoScore = images.reduce((sum, img) => sum + (img.seoScore || 0), 0) / images.length || 0;

  const filteredImages = images.filter(image => {
    const matchesSearch = image.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         image.tags.some(tag => tag.label.toLowerCase().includes(searchTerm.toLowerCase()));
    const matchesStatus = statusFilter === 'all' || image.status === statusFilter;
    return matchesSearch && matchesStatus;
  });
        
        // Create FormData for file upload
        const formData = new FormData();
        formData.append('file', file);
        formData.append('filename', file.name);
        formData.append('fileSize', file.size.toString());
        formData.append('dimensions', JSON.stringify(dimensions));
        formData.append('format', file.type.split('/')[1] || 'jpg');

        // Upload and analyze image
        const response = await fetch('/api/visiontagger/analyze', {
          method: 'POST',
          body: formData,
        });

        if (!response.ok) {
          throw new Error(`Failed to analyze ${file.name}`);
        }

        return await response.json();
      });

      const results = await Promise.all(uploadPromises);
      console.log('Analysis results:', results);

      // Refresh data after upload
      await refetch();
      setSelectedFiles([]);
      alert(`Successfully analyzed ${results.length} image(s)!`);
    } catch (error) {
      console.error('Error analyzing images:', error);
      alert(`Error analyzing images: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setAnalyzing(false);
    }
  };

  // Helper function to get image dimensions
  const getImageDimensions = (file: File): Promise<{ width: number; height: number }> => {
    return new Promise((resolve) => {
      const img = new window.Image();
      img.onload = () => {
        resolve({ width: img.width, height: img.height });
      };
      img.src = URL.createObjectURL(file);
    });
  };

  const handleFixImage = async (image: AnalyzedImage) => {
    try {
      // TODO: Implement fix API call
      const updatedImages = images.map(img => 
        img.id === image.id 
          ? { 
              ...img, 
              status: 'fixed' as const,
              altText: img.suggestedAltText,
              caption: img.suggestedCaption,
              description: img.suggestedDescription,
            }
          : img
      );
      setImages(updatedImages);
      setShowImageModal(false);
      alert('Image metadata updated successfully!');
    } catch (error) {
      console.error('Error fixing image:', error);
      alert('Error updating image. Please try again.');
    }
  };

  const renderDashboard = () => (
    <>
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-purple-500/20">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <div className="p-3 bg-gradient-to-br from-purple-600/30 to-purple-800/30 rounded-xl shadow-lg">
                <ImageIcon className="h-6 w-6 text-purple-300" />
              </div>
              <h3 className="font-medium ml-3 text-purple-200">Total Images</h3>
            </div>
          </div>
          <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-400 mb-2">
            {totalImages}
          </p>
          <p className="text-sm text-gray-400">+{Math.round(totalImages * 0.15)} this week</p>
        </Card>

        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-green-500/20">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <div className="p-3 bg-gradient-to-br from-green-600/30 to-green-800/30 rounded-xl shadow-lg">
                <CheckCircle className="h-6 w-6 text-green-300" />
              </div>
              <h3 className="font-medium ml-3 text-green-200">Analyzed</h3>
            </div>
          </div>
          <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-emerald-400 mb-2">
            {analyzedImages}
          </p>
          <p className="text-sm text-gray-400">{Math.round((analyzedImages / totalImages) * 100)}% completion</p>
        </Card>

        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-blue-500/20">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <div className="p-3 bg-gradient-to-br from-blue-600/30 to-blue-800/30 rounded-xl shadow-lg">
                <Zap className="h-6 w-6 text-blue-300" />
              </div>
              <h3 className="font-medium ml-3 text-blue-200">Fixed</h3>
            </div>
          </div>
          <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-400 to-cyan-400 mb-2">
            {fixedImages}
          </p>
          <p className="text-sm text-gray-400">Auto-optimized</p>
        </Card>

        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm transform hover:scale-105 transition-all duration-300 shadow-2xl hover:shadow-orange-500/20">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <div className="p-3 bg-gradient-to-br from-orange-600/30 to-orange-800/30 rounded-xl shadow-lg">
                <Target className="h-6 w-6 text-orange-300" />
              </div>
              <h3 className="font-medium ml-3 text-orange-200">Avg SEO Score</h3>
            </div>
          </div>
          <p className="text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-orange-400 to-red-400 mb-2">
            {Math.round(avgSeoScore)}
          </p>
          <p className="text-sm text-gray-400">Out of 100</p>
        </Card>
      </div>

      {/* Charts Section */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
          <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
            <BarChart3 className="h-5 w-5 mr-2" />
            Processing Trends
          </h2>
          <div className="h-[350px]">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={metricsData}>
                <defs>
                  <linearGradient id="colorProcessed" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#8B5CF6" stopOpacity={0.4} />
                    <stop offset="95%" stopColor="#8B5CF6" stopOpacity={0} />
                  </linearGradient>
                  <linearGradient id="colorGenerated" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#10B981" stopOpacity={0.4} />
                    <stop offset="95%" stopColor="#10B981" stopOpacity={0} />
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" stroke="#3D3A6E" opacity={0.3} />
                <XAxis dataKey="date" stroke="#A78BFA" fontSize={12} />
                <YAxis stroke="#A78BFA" fontSize={12} />
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'rgba(30, 27, 75, 0.95)',
                    borderColor: '#3D3A6E',
                    borderRadius: '12px',
                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
                    backdropFilter: 'blur(10px)',
                  }}
                />
                <Area
                  type="monotone"
                  dataKey="imagesProcessed"
                  stroke="#8B5CF6"
                  strokeWidth={3}
                  fillOpacity={1}
                  fill="url(#colorProcessed)"
                />
                <Area
                  type="monotone"
                  dataKey="altTextGenerated"
                  stroke="#10B981"
                  strokeWidth={3}
                  fillOpacity={1}
                  fill="url(#colorGenerated)"
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </Card>

        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
          <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
            <Tag className="h-5 w-5 mr-2" />
            Image Categories
          </h2>
          <div className="h-[350px] flex items-center justify-center">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={categoryData}
                  cx="50%"
                  cy="50%"
                  innerRadius={70}
                  outerRadius={120}
                  paddingAngle={8}
                  dataKey="value"
                >
                  {categoryData.map((entry, index) => (
                    <Cell key={`cell-${index}`} fill={entry.color} />
                  ))}
                </Pie>
                <Tooltip
                  contentStyle={{
                    backgroundColor: 'rgba(30, 27, 75, 0.95)',
                    borderColor: '#3D3A6E',
                    borderRadius: '12px',
                    boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3)',
                    backdropFilter: 'blur(10px)',
                  }}
                />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <div className="flex justify-center gap-6 mt-4">
            {categoryData.map((item, index) => (
              <div key={index} className="flex items-center">
                <div 
                  className="w-4 h-4 rounded-full mr-2 shadow-lg" 
                  style={{ backgroundColor: item.color }}
                />
                <span className="text-sm text-gray-300">{item.name} ({item.value})</span>
              </div>
            ))}
          </div>
        </Card>
      </div>

      {/* Score Cards */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
          <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
            <TrendingUp className="h-5 w-5 mr-2" />
            SEO Performance
          </h2>
          <div className="h-[200px]">
            <ResponsiveContainer width="100%" height="100%">
              <RadialBarChart cx="50%" cy="50%" innerRadius="60%" outerRadius="90%" data={seoScoreData}>
                <RadialBar
                  dataKey="value"
                  cornerRadius={10}
                  fill="#10B981"
                  stroke="#10B981"
                  strokeWidth={2}
                />
                <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" className="fill-white text-2xl font-bold">
                  {seoScoreData[0].value}%
                </text>
              </RadialBarChart>
            </ResponsiveContainer>
          </div>
        </Card>

        <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
          <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
            <Eye className="h-5 w-5 mr-2" />
            Accessibility Score
          </h2>
          <div className="h-[200px]">
            <ResponsiveContainer width="100%" height="100%">
              <RadialBarChart cx="50%" cy="50%" innerRadius="60%" outerRadius="90%" data={accessibilityData}>
                <RadialBar
                  dataKey="value"
                  cornerRadius={10}
                  fill="#3B82F6"
                  stroke="#3B82F6"
                  strokeWidth={2}
                />
                <text x="50%" y="50%" textAnchor="middle" dominantBaseline="middle" className="fill-white text-2xl font-bold">
                  {accessibilityData[0].value}%
                </text>
              </RadialBarChart>
            </ResponsiveContainer>
          </div>
        </Card>
      </div>
    </>
  );

  const renderAnalyze = () => (
    <div className="space-y-6">
      <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
        <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
          <Upload className="h-5 w-5 mr-2" />
          Upload Images for Analysis
        </h2>
        
        <div
          className={`border-2 border-dashed rounded-xl p-8 text-center transition-all duration-300 ${
            dragActive 
              ? 'border-purple-400 bg-purple-400/10' 
              : 'border-[#3D3A6E] hover:border-purple-500'
          }`}
          onDragEnter={handleDrag}
          onDragLeave={handleDrag}
          onDragOver={handleDrag}
          onDrop={handleDrop}
        >
          <div className="flex flex-col items-center">
            <div className="p-4 bg-gradient-to-br from-purple-600/30 to-purple-800/30 rounded-full mb-4">
              <Camera className="h-12 w-12 text-purple-300" />
            </div>
            <h3 className="text-lg font-semibold text-white mb-2">
              Drop your images here or click to browse
            </h3>
            <p className="text-gray-400 mb-4">
              Supports: JPG, PNG, WEBP, GIF (Max size: 10MB each)
            </p>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileSelect}
              className="hidden"
              id="file-upload"
            />
            <label
              htmlFor="file-upload"
              className="bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 px-6 py-3 rounded-xl text-white font-medium cursor-pointer transition-all duration-300 shadow-lg hover:shadow-purple-500/25"
            >
              Select Images
            </label>
          </div>
        </div>

        {selectedFiles.length > 0 && (
          <div className="mt-6">
            <h3 className="text-lg font-semibold text-white mb-4">Selected Images ({selectedFiles.length})</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              {selectedFiles.map((file, index) => (
                <div key={index} className="relative bg-[#1E1B4B]/60 rounded-lg p-3 border border-[#3D3A6E]">
                  <div className="aspect-square bg-gray-800 rounded-lg mb-2 flex items-center justify-center">
                    <ImageIcon className="h-8 w-8 text-gray-400" />
                  </div>
                  <p className="text-sm text-gray-300 truncate">{file.name}</p>
                  <p className="text-xs text-gray-500">{(file.size / 1024 / 1024).toFixed(2)} MB</p>
                  <button
                    onClick={() => setSelectedFiles(files => files.filter((_, i) => i !== index))}
                    className="absolute -top-2 -right-2 bg-red-500 hover:bg-red-600 text-white rounded-full p-1 transition-colors"
                  >
                    <X className="h-3 w-3" />
                  </button>
                </div>
              ))}
            </div>
            
            <div className="flex justify-center">
              <Button
                onClick={handleAnalyzeImages}
                disabled={analyzing}
                className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 px-8 py-3 rounded-xl shadow-lg hover:shadow-green-500/25 transition-all duration-300"
              >
                {analyzing ? (
                  <>
                    <Loader2 className="h-5 w-5 animate-spin mr-2" />
                    Analyzing Images...
                  </>
                ) : (
                  <>
                    <Sparkles className="h-5 w-5 mr-2" />
                    Analyze {selectedFiles.length} Image{selectedFiles.length !== 1 ? 's' : ''}
                  </>
                )}
              </Button>
            </div>
          </div>
        )}
      </Card>
    </div>
  );

  const renderManage = () => (
    <div className="space-y-6">
      {/* Search and Filter */}
      <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
        <div className="flex flex-col md:flex-row gap-4 items-center justify-between">
          <div className="flex gap-4 flex-1">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="Search images..."
                className="bg-[#1E1B4B]/70 border-[#3D3A6E] text-white pl-10 backdrop-blur-sm"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <select
              className="bg-[#1E1B4B]/70 border border-[#3D3A6E] rounded-lg px-4 py-2 text-white backdrop-blur-sm"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="analyzed">Analyzed</option>
              <option value="fixed">Fixed</option>
              <option value="error">Error</option>
            </select>
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              onClick={() => setViewMode('grid')}
              className={`${viewMode === 'grid' ? 'bg-purple-600 text-white' : 'text-purple-300 border-purple-300'}`}
            >
              <Grid className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              onClick={() => setViewMode('list')}
              className={`${viewMode === 'list' ? 'bg-purple-600 text-white' : 'text-purple-300 border-purple-300'}`}
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </Card>

      {/* Images Grid/List */}
      <Card className="bg-gradient-to-br from-[#2A2153]/90 to-[#2A2153]/70 border-[#3D3A6E] p-6 backdrop-blur-sm shadow-2xl">
        <h2 className="text-xl font-semibold mb-6 text-purple-300 flex items-center">
          <FileText className="h-5 w-5 mr-2" />
          Analyzed Images ({filteredImages.length})
        </h2>
        
        {filteredImages.length === 0 ? (
          <div className="text-center py-12">
            <ImageIcon className="h-16 w-16 text-gray-500 mx-auto mb-4" />
            <p className="text-gray-400 text-lg">No images found</p>
            <p className="text-gray-500 text-sm">Upload and analyze images to get started</p>
          </div>
        ) : viewMode === 'grid' ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredImages.map((image) => (
              <div
                key={image.id}
                className="bg-gradient-to-br from-[#1E1B4B]/60 to-[#1E1B4B]/40 rounded-xl border border-[#3D3A6E] backdrop-blur-sm hover:bg-[#1E1B4B]/80 transition-all duration-300 transform hover:scale-102 shadow-lg overflow-hidden"
              >
                <div className="aspect-video bg-gray-800 relative">
                  <div className="absolute inset-0 flex items-center justify-center">
                    <ImageIcon className="h-12 w-12 text-gray-400" />
                  </div>
                  <div className="absolute top-2 right-2">
                    <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
                      image.status === 'fixed' ? 'bg-green-400/20 text-green-400 border border-green-400/30' :
                      image.status === 'analyzed' ? 'bg-blue-400/20 text-blue-400 border border-blue-400/30' :
                      image.status === 'pending' ? 'bg-yellow-400/20 text-yellow-400 border border-yellow-400/30' :
                      'bg-red-400/20 text-red-400 border border-red-400/30'
                    }`}>
                      {image.status}
                    </span>
                  </div>
                </div>
                <div className="p-4">
                  <h3 className="font-semibold text-lg text-white mb-2">{image.title}</h3>
                  <div className="flex flex-wrap gap-1 mb-3">
                    {image.tags.slice(0, 3).map((tag, idx) => (
                      <span
                        key={idx}
                        className="bg-purple-600/20 text-purple-300 px-2 py-1 rounded-full text-xs border border-purple-400/30"
                      >
                        {tag.label} ({Math.round(tag.confidence * 100)}%)
                      </span>
                    ))}
                  </div>
                  <div className="flex items-center justify-between text-sm text-gray-400 mb-4">
                    <span>{image.dimensions?.width}x{image.dimensions?.height}</span>
                    <span>{image.fileSize} MB</span>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelectedImage(image);
                        setShowImageModal(true);
                      }}
                      className="text-purple-300 border-purple-300 hover:bg-purple-600/20 flex-1"
                    >
                      <Eye className="h-3 w-3 mr-1" />
                      View
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setEditingImage(image);
                        setShowEditModal(true);
                      }}
                      className="text-blue-300 border-blue-300 hover:bg-blue-600/20 flex-1"
                    >
                      <Edit3 className="h-3 w-3 mr-1" />
                      Edit
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {filteredImages.map((image) => (
              <div
                key={image.id}
                className="bg-gradient-to-r from-[#1E1B4B]/60 to-[#1E1B4B]/40 rounded-xl border border-[#3D3A6E] p-4 backdrop-blur-sm hover:bg-[#1E1B4B]/80 transition-all duration-300"
              >
                <div className="flex items-center gap-4">
                  <div className="w-16 h-16 bg-gray-800 rounded-lg flex items-center justify-center">
                    <ImageIcon className="h-8 w-8 text-gray-400" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-semibold text-white">{image.title}</h3>
                      <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                        image.status === 'fixed' ? 'bg-green-400/20 text-green-400' :
                        image.status === 'analyzed' ? 'bg-blue-400/20 text-blue-400' :
                        image.status === 'pending' ? 'bg-yellow-400/20 text-yellow-400' :
                        'bg-red-400/20 text-red-400'
                      }`}>
                        {image.status}
                      </span>
                    </div>
                    <div className="flex flex-wrap gap-2 mb-2">
                      {image.tags.slice(0, 5).map((tag, idx) => (
                        <span
                          key={idx}
                          className="bg-purple-600/20 text-purple-300 px-2 py-1 rounded text-xs"
                        >
                          {tag.label}
                        </span>
                      ))}
                    </div>
                    <div className="flex items-center justify-between text-sm text-gray-400">
                      <span>SEO: {image.seoScore}/100 | Accessibility: {image.accessibilityScore}/100</span>
                      <span>{image.analyzedAt.toLocaleDateString()}</span>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setSelectedImage(image);
                        setShowImageModal(true);
                      }}
                      className="text-purple-300 border-purple-300 hover:bg-purple-600/20"
                    >
                      <Eye className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => {
                        setEditingImage(image);
                        setShowEditModal(true);
                      }}
                      className="text-blue-300 border-blue-300 hover:bg-blue-600/20"
                    >
                      <Edit3 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </Card>
    </div>
  );

  return (
    <DashboardLayout>
      <div className="min-h-screen bg-gradient-to-br from-[#1E1B4B] via-[#2D2A5E] to-[#1E1B4B] p-6">
        <div className="space-y-8">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 via-pink-400 to-orange-400">
                VisionTagger
              </h1>
              <p className="text-gray-400 mt-2 text-lg">AI-Powered Image Analysis & SEO Optimization</p>
            </div>
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={() => setActiveView('dashboard')}
                className={`px-6 py-2 rounded-xl transition-all duration-300 ${
                  activeView === 'dashboard'
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg shadow-purple-500/25'
                    : 'bg-transparent text-purple-300 hover:bg-purple-600/20 border-purple-400/30'
                }`}
              >
                Dashboard
              </Button>
              <Button
                variant="outline"
                onClick={() => setActiveView('analyze')}
                className={`px-6 py-2 rounded-xl transition-all duration-300 ${
                  activeView === 'analyze'
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg shadow-purple-500/25'
                    : 'bg-transparent text-purple-300 hover:bg-purple-600/20 border-purple-400/30'
                }`}
              >
                Analyze
              </Button>
              <Button
                variant="outline"
                onClick={() => setActiveView('manage')}
                className={`px-6 py-2 rounded-xl transition-all duration-300 ${
                  activeView === 'manage'
                    ? 'bg-gradient-to-r from-purple-600 to-pink-600 text-white shadow-lg shadow-purple-500/25'
                    : 'bg-transparent text-purple-300 hover:bg-purple-600/20 border-purple-400/30'
                }`}
              >
                Manage
              </Button>
            </div>
          </div>

          {/* Dynamic Content */}
          {activeView === 'dashboard' && renderDashboard()}
          {activeView === 'analyze' && renderAnalyze()}
          {activeView === 'manage' && renderManage()}

          {/* Image Detail Modal */}
          {showImageModal && selectedImage && (
            <div className="fixed inset-0 bg-black/70 z-50 flex justify-center items-center p-4">
              <div className="w-full max-w-4xl max-h-[90vh] overflow-y-auto bg-gradient-to-br from-[#2A2153] to-[#1E1B4B] rounded-2xl shadow-2xl border border-[#3D3A6E]">
                <div className="sticky top-0 bg-gradient-to-r from-[#2A2153] to-[#1E1B4B] border-b border-[#3D3A6E] p-6 flex justify-between items-center">
                  <h2 className="text-2xl font-bold text-white">Image Analysis Details</h2>
                  <div className="flex gap-3">
                    {selectedImage.status === 'analyzed' && (
                      <Button 
                        onClick={() => handleFixImage(selectedImage)} 
                        className="bg-green-600 hover:bg-green-700 text-white"
                      >
                        <Check className="h-4 w-4 mr-2" />
                        Apply Suggestions
                      </Button>
                    )}
                    <Button 
                      onClick={() => setShowImageModal(false)} 
                      className="bg-red-600 hover:bg-red-700 text-white"
                    >
                      <X className="h-4 w-4 mr-2" />
                      Close
                    </Button>
                  </div>
                </div>

                <div className="p-6 space-y-6">
                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div>
                      <h3 className="text-lg font-semibold text-white mb-4">Image Preview</h3>
                      <div className="aspect-video bg-gray-800 rounded-lg flex items-center justify-center">
                        <ImageIcon className="h-16 w-16 text-gray-400" />
                      </div>
                      <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-gray-400">Dimensions:</span>
                          <span className="text-white ml-2">{selectedImage.dimensions?.width}x{selectedImage.dimensions?.height}</span>
                        </div>
                        <div>
                          <span className="text-gray-400">File Size:</span>
                          <span className="text-white ml-2">{selectedImage.fileSize} MB</span>
                        </div>
                        <div>
                          <span className="text-gray-400">SEO Score:</span>
                          <span className="text-white ml-2">{selectedImage.seoScore}/100</span>
                        </div>
                        <div>
                          <span className="text-gray-400">Accessibility:</span>
                          <span className="text-white ml-2">{selectedImage.accessibilityScore}/100</span>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h3 className="text-lg font-semibold text-white mb-4">Detected Tags</h3>
                      <div className="space-y-2">
                        {selectedImage.tags.map((tag, idx) => (
                          <div key={idx} className="flex items-center justify-between bg-[#1E1B4B]/60 rounded-lg p-3">
                            <div>
                              <span className="text-white font-medium">{tag.label}</span>
                              {tag.category && (
                                <span className="text-gray-400 text-sm ml-2">({tag.category})</span>
                              )}
                            </div>
                            <span className="text-purple-300 font-semibold">
                              {Math.round(tag.confidence * 100)}%
                            </span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <h3 className="text-lg font-semibold text-white mb-2">Current Alt Text</h3>
                      <p className="text-gray-300 bg-[#1E1B4B]/60 rounded-lg p-3">
                        {selectedImage.altText || 'No alt text available'}
                      </p>
                    </div>

                    {selectedImage.suggestedAltText && (
                      <div>
                        <h3 className="text-lg font-semibold text-green-400 mb-2">Suggested Alt Text</h3>
                        <p className="text-white bg-green-600/20 border border-green-400/30 rounded-lg p-3">
                          {selectedImage.suggestedAltText}
                        </p>
                      </div>
                    )}

                    {selectedImage.suggestedCaption && (
                      <div>
                        <h3 className="text-lg font-semibold text-blue-400 mb-2">Suggested Caption</h3>
                        <p className="text-white bg-blue-600/20 border border-blue-400/30 rounded-lg p-3">
                          {selectedImage.suggestedCaption}
                        </p>
                      </div>
                    )}

                    {selectedImage.suggestedDescription && (
                      <div>
                        <h3 className="text-lg font-semibold text-purple-400 mb-2">Suggested Description</h3>
                        <p className="text-white bg-purple-600/20 border border-purple-400/30 rounded-lg p-3">
                          {selectedImage.suggestedDescription}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Edit Modal */}
          {showEditModal && editingImage && (
            <div className="fixed inset-0 bg-black/70 z-50 flex justify-center items-center p-4">
              <div className="w-full max-w-2xl bg-gradient-to-br from-[#2A2153] to-[#1E1B4B] rounded-2xl shadow-2xl border border-[#3D3A6E]">
                <div className="border-b border-[#3D3A6E] p-6 flex justify-between items-center">
                  <h2 className="text-2xl font-bold text-white">Edit Image Metadata</h2>
                  <Button 
                    onClick={() => setShowEditModal(false)} 
                    className="bg-red-600 hover:bg-red-700 text-white"
                  >
                    <X className="h-4 w-4" />
                  </Button>
                </div>

                <div className="p-6 space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-purple-200 mb-2">Alt Text</label>
                    <Textarea
                      className="bg-[#1E1B4B]/70 border-[#3D3A6E] text-white backdrop-blur-sm"
                      rows={3}
                      defaultValue={editingImage.altText}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-purple-200 mb-2">Caption</label>
                    <Textarea
                      className="bg-[#1E1B4B]/70 border-[#3D3A6E] text-white backdrop-blur-sm"
                      rows={3}
                      defaultValue={editingImage.caption}
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-purple-200 mb-2">Description</label>
                    <Textarea
                      className="bg-[#1E1B4B]/70 border-[#3D3A6E] text-white backdrop-blur-sm"
                      rows={4}
                      defaultValue={editingImage.description}
                    />
                  </div>

                  <div className="flex justify-end gap-3 pt-4">
                    <Button
                      variant="outline"
                      onClick={() => setShowEditModal(false)}
                      className="text-gray-300 border-gray-300 hover:bg-gray-600/20"
                    >
                      Cancel
                    </Button>
                    <Button
                      onClick={() => {
                        // TODO: Implement save functionality
                        setShowEditModal(false);
                        alert('Changes saved successfully!');
                      }}
                      className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                    >
                      <Check className="h-4 w-4 mr-2" />
                      Save Changes
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </DashboardLayout>
  );
} 